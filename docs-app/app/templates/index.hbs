{{! template-lint-disable no-inline-styles }}
<Hero>
  <div class="grid gap-8" id="skip-to-target">
    <h1 class="type-3xl">ember-headless-form</h1>

    <p class="type-lg">
      The Ember.js addon that distills the common behavior and accessibility
      best practices of forms into reusable components, without any opinions on
      specific markup or styling. Use it to build your forms directly, or to
      build your opinionated forms component kit on top of it.
    </p>

    <span>
      <Toucan::Link @variant="brand" class="px-6 py-1 flex gap-3" @href="/docs">
        Getting started
        <svg
          class="w-4 ml-2"
          viewBox="0 0 14 13"
          fill="none"
          xmlns="http://www.w3.org/2000/svg"
        >
          <title>GitHub</title>
          <path
            fill-rule="evenodd"
            clip-rule="evenodd"
            d="M7.25647 0.256191C7.42056 0.0921521 7.64308 0 7.8751 0C8.10713 0 8.32965 0.0921521 8.49374 0.256191L13.7438 5.50626C13.9078 5.67035 14 5.89287 14 6.12489C14 6.35692 13.9078 6.57944 13.7438 6.74353L8.49374 11.9936C8.32871 12.153 8.10768 12.2412 7.87825 12.2392C7.64883 12.2372 7.42937 12.1452 7.26713 11.9829C7.1049 11.8207 7.01287 11.6012 7.01088 11.3718C7.00889 11.1424 7.09708 10.9214 7.25647 10.7563L11.0129 6.99991H0.875012C0.642944 6.99991 0.420381 6.90772 0.256285 6.74362C0.0921884 6.57952 0 6.35696 0 6.12489C0 5.89283 0.0921884 5.67026 0.256285 5.50617C0.420381 5.34207 0.642944 5.24988 0.875012 5.24988H11.0129L7.25647 1.49346C7.09243 1.32937 7.00028 1.10685 7.00028 0.874825C7.00028 0.642803 7.09243 0.42028 7.25647 0.256191Z"
            fill="white"
          />
        </svg>
      </Toucan::Link>
    </span>
  </div>
</Hero>

<hr class="border bg-basement" />

<Main>
  <ContentSection>
    <:header>
      Why even this addon?
    </:header>
    <:content>
      <div>
        <p class="mb-4">Forms aren't exactly a new thing, so why this addon?
          Existing solutions are either not using the latest Ember paradigms
          (Octane/Polaris), generate specific markup and are thus hard to
          customize, or are coupled to a specific validation library.
          ember-headless-form is none of this. It gives you all the flexibility,
          without having to reinvent the wheel.</p>
        <p>These are the main problems it solves:</p>
        <ul class="list-disc list-inside">
          <li>Getting data in and out of the from</li>
          <li>Rendering semantic form markup, accessible by default</li>
          <li>Provide rich support for client-side validation</li>
        </ul>
      </div>
    </:content>
  </ContentSection>

  <ContentSection>
    <:content>
      <div
        class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-12 md:gap-16"
      >
        <FeatureCard @title="TypeScript/Glint">
          Written in TypeScript/Glint, with TypeScript/Glint users in mind. Get
          strict type checking of its components, arguments and form data,
          together with API docs right in your IDE.
        </FeatureCard>

        <FeatureCard @title="Accessibility">
          Bakes accessibility best practices into the addon, so you have to care
          less. It does not render much, but what it renders is pure semantic
          and ARIA enriched form markup, tested for a11y.
        </FeatureCard>

        <FeatureCard @title="Native validation">
          Integrates native HTML5 based form validation seamlessly, with custom
          error rendering. Use it alone, or mix it with custom validations.
        </FeatureCard>

        <FeatureCard @title="Custom validation">
          Where native validation falls short, you can extend that with custom
          JavaScript-based validation rules. Either by writing your own
          functions, or by integrating 3rd party validation libraries.
        </FeatureCard>

        <FeatureCard @title="ember-changeset">
          Integrate ember-changeset and ember-changeset-validations seamlessly
          into your forms, offloading the form validation to the validations
          defined on your Changeset.
        </FeatureCard>

        <FeatureCard @title="yup">
          Use the popular TypeScript-friendly validation library to validate
          your form data with a yup schema.
        </FeatureCard>

      </div>
    </:content>
  </ContentSection>
</Main>